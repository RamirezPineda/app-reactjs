name: CI/CD App React

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Lint code
        run: pnpm run lint

  tests:
    name: Tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

      - name: Run coverage
        run: pnpm test:coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  build:
    name: Build
    runs-on: ubuntu-22.04
    needs: ["lint", "tests"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Build production bundle
        run: pnpm run build

      - name: Verify Build folder
        run: ls -la dist/

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: "build"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/app-reactjs:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/app-reactjs:${{ github.sha }}

      - name: Verify published images
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app-reactjs:latest
          docker images | grep app-reactjs

  terraform:
    name: Provision DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: terraform/

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DO_TOKEN }}" \
            -var="ssh_fingerprint=${{ secrets.SSH_FINGERPRINT }}"
        working-directory: terraform/

      - name: Capture Droplet IP
        id: tf
        run: |
          echo "ip_address=$(terraform output -raw ip_address)" >> $GITHUB_OUTPUT
        working-directory: terraform/

  deploy:
    name: Deploy with Ansible
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Install Ansible & community.docker
        run: |
          sudo apt update
          sudo apt install -y python3-pip ssh
          pip3 install ansible
          ansible-galaxy collection install community.docker

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create inventory file
        run: |
          echo "${{ needs.terraform.outputs.ip_address }} ansible_user=root ansible_ssh_common_args='-o StrictHostKeyChecking=no'" > ansible/inventory.ini
          cat ansible/inventory.ini

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
          --extra-vars "image_name=${{ secrets.DOCKERHUB_USERNAME }}/app-reactjs:latest"
